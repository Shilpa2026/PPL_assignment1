A-5)


PROGRAM						OUTPUT
                                               |
;; Function main (main, funcdef_no=0, decl_uid=|;; Function main (main, funcdef_no=0, decl_uid=1794, cgraph_uid=0, symbol_order=0)
1794, cgraph_uid=0, symbol_order=0)            |
                                               |main ()
;; 1 loops found                               |{
;;                                             |  int d;
;; Loop 0                                      |  int c;
;;  header 0, latch 1                          |  int b;
;;  depth 0, outer -1                          |  int a;
;;  nodes: 0 1 2 3 4 5 6                       |  int D.1804;
;; 2 succs { 3 4 }                             |  int _10;
;; 3 succs { 5 }                               |
;; 4 succs { 5 }                               |  <bb 2> [0.00%]:
;; 5 succs { 6 }                               |  d_3 = 10;
;; 6 succs { 1 }                               |  if (c_4(D) > d_3)
main ()                                        |    goto <bb 3>; [0.00%]
{                                              |  else
  int d;                                       |    goto <bb 4>; [0.00%]
  int c;                                       |
  int b;                                       |  <bb 3> [0.00%]:
  int a;                                       |  a_7 = 3;
  int D.1804;                                  |  b_8 = 2;
                                               |  goto <bb 5>; [0.00%]
  <bb 2> [0.00%]:                              |
  d = 10;                                      |  <bb 4> [0.00%]:
  if (c > d)                                   |  a_5 = 2;
    goto <bb 3>; [0.00%]                       |  b_6 = 3;
  else                                         |
    goto <bb 4>; [0.00%]                       |  <bb 5> [0.00%]:
                                               |  # a_1 = PHI <a_7(3), a_5(4)>
  <bb 3> [0.00%]:                              |  # b_2 = PHI <b_8(3), b_6(4)>
  a = 3;                                       |  c_9 = a_1 + b_2;
  b = 2;                                       |  _10 = 0;
  goto <bb 5>; [0.00%]                         |
                                               |<L3> [0.00%]:
  <bb 4> [0.00%]:                              |  return _10;
  a = 2;                                       |
  b = 3;                                       |}
                                               |
  <bb 5> [0.00%]:                              |
  c = a + b;                                   |~
  D.1804 = 0;                                  |~
                                               |~
<L3> [0.00%]:                                  |~
  return D.1804;                               |~
                                               |~
}                                              |~




SOLUTION




        1   Local variables are  suffixed with a unique  number which represents
            the assignment. For  example, `d_3' refers to the  usage of variable
            `d'  and  the  only  assignment  which reaches  this  point  is  the
            assignment `d_3'.  Variables that are  likely to be used  before any
            assignment are suffixed  with `(D)' to indicate  that the assignment
            was implicit in the declaration.  This happens to both uninitialized
            local variables and formal parameters.  For example, variable `c' is
            used as `c_4(D)' in the `if' condition.

        2   A PHI node merges assignments from different paths and creates a new
            assignment. For example:

                # a_1 = PHI <a_5(3), a_7(4)> 

            indicates that if  the control reaches here from basic  block 3 then
            use the  value of a_5;  otherwise if  the control reaches  here from
            basic block 4 then use the value of a_7.

        3   A switch statement can result in a merge of more than two paths (and
            hence possibly more than two assignments). Consider:

            int main()
            {
                int a, b;
                switch (a)
                {
                    case 1:
                        b = 2;
                        break;
                    case 2:
                        b = 3;
                        break;
                    case 3:
                        b = 4;
                    case 4:
                        b = 5;
                        break;
                    case 5:
                    case 6:
                        b = 6;
                        break;
                    default:
                        b = 7;
                }
                return b;
            }
            
            In this case  the PHI node at  the end of the  switch statement will
            merge multiple assignments such as:

            # b_1 = PHI <b_4(3), b_5(4), b_7(6), b_8(7), b_9(8)>